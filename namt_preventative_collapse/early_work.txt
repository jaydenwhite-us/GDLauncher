for a + b = c, and c is even
either a = b 
or
a > c/2 xor b > c/2

for a + b = c, and c is odd
a xor b is >= c/2 + 1

Early warning of immenent collapse is O(1) : Track the min and max
if max < c/2 ceiling then it is undoubtedly unsafe
if min > c/2 floor then it is definitely unsafe


Uncertain of immenent collapse.
Search methods
for i = 0, i..k,
a0 + a(i+1) = a(k+1)
first loop is
k-i = k
k-(i+1)
k-(i+2)
k-(i+3)
k-(i+4) = 1
...
k-(i+..) = 0

first loop
0 + 1..k-1
1 + 2..k-1
2 + 3..k-1
3 + 4..k-1
k-2 + k-1



In the case of k = 5
0+1, 0+2, 0+3, 0+4 4ops
1 + 2, 1 + 3, 1+ 4 3ops
2 + 3, 2+ 4 2ops
3 + 4 1op

normally n(n+1)/2
(k-1)(k)/2 -> This pattern predicts the number of ops when unsorted and using one location in memory

0 : 0
1 : 0
2 : 1
3 : 2
4 : 6
5 : 10
6 : 15

1/2(k^2 - k)
O(k^2)
Complexity is exponentially increasing as n increases.


for a > c/2 and b > c/2, c is even
if a inverse is in the set 0..m,
then m+1 is okay and the mine does not collapse.

////
get window to data 0..m
turn data into tuples (entry, insertion_order) O(n)


repeat
sort tuples by entry, O(n*log(n)) for first m elements, O(n) for subsequent loops
binary_search for c-a in tuples, O(log(n))
do some logic
'_prep_for_next_iteration loop
	if insertion_order != 0{
		decrement insertion_order
		continue
	}
	overwrite tuple with (a(m+1), m-1))
//






